// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: shard.proto

package shard

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServiceShardAPI_Greet_FullMethodName    = "/shard.ServiceShardAPI/Greet"
	ServiceShardAPI_SyncDBs_FullMethodName  = "/shard.ServiceShardAPI/SyncDBs"
	ServiceShardAPI_BatchOut_FullMethodName = "/shard.ServiceShardAPI/BatchOut"
)

// ServiceShardAPIClient is the client API for ServiceShardAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceShardAPIClient interface {
	Greet(ctx context.Context, in *Hello, opts ...grpc.CallOption) (*Hey, error)
	SyncDBs(ctx context.Context, in *SyncSend, opts ...grpc.CallOption) (*SyncReply, error)
	BatchOut(ctx context.Context, in *BatchData, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type serviceShardAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceShardAPIClient(cc grpc.ClientConnInterface) ServiceShardAPIClient {
	return &serviceShardAPIClient{cc}
}

func (c *serviceShardAPIClient) Greet(ctx context.Context, in *Hello, opts ...grpc.CallOption) (*Hey, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Hey)
	err := c.cc.Invoke(ctx, ServiceShardAPI_Greet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceShardAPIClient) SyncDBs(ctx context.Context, in *SyncSend, opts ...grpc.CallOption) (*SyncReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncReply)
	err := c.cc.Invoke(ctx, ServiceShardAPI_SyncDBs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceShardAPIClient) BatchOut(ctx context.Context, in *BatchData, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ServiceShardAPI_BatchOut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceShardAPIServer is the server API for ServiceShardAPI service.
// All implementations must embed UnimplementedServiceShardAPIServer
// for forward compatibility.
type ServiceShardAPIServer interface {
	Greet(context.Context, *Hello) (*Hey, error)
	SyncDBs(context.Context, *SyncSend) (*SyncReply, error)
	BatchOut(context.Context, *BatchData) (*emptypb.Empty, error)
	mustEmbedUnimplementedServiceShardAPIServer()
}

// UnimplementedServiceShardAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceShardAPIServer struct{}

func (UnimplementedServiceShardAPIServer) Greet(context.Context, *Hello) (*Hey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Greet not implemented")
}
func (UnimplementedServiceShardAPIServer) SyncDBs(context.Context, *SyncSend) (*SyncReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncDBs not implemented")
}
func (UnimplementedServiceShardAPIServer) BatchOut(context.Context, *BatchData) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchOut not implemented")
}
func (UnimplementedServiceShardAPIServer) mustEmbedUnimplementedServiceShardAPIServer() {}
func (UnimplementedServiceShardAPIServer) testEmbeddedByValue()                         {}

// UnsafeServiceShardAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceShardAPIServer will
// result in compilation errors.
type UnsafeServiceShardAPIServer interface {
	mustEmbedUnimplementedServiceShardAPIServer()
}

func RegisterServiceShardAPIServer(s grpc.ServiceRegistrar, srv ServiceShardAPIServer) {
	// If the following call pancis, it indicates UnimplementedServiceShardAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServiceShardAPI_ServiceDesc, srv)
}

func _ServiceShardAPI_Greet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hello)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceShardAPIServer).Greet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceShardAPI_Greet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceShardAPIServer).Greet(ctx, req.(*Hello))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceShardAPI_SyncDBs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncSend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceShardAPIServer).SyncDBs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceShardAPI_SyncDBs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceShardAPIServer).SyncDBs(ctx, req.(*SyncSend))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceShardAPI_BatchOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceShardAPIServer).BatchOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceShardAPI_BatchOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceShardAPIServer).BatchOut(ctx, req.(*BatchData))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceShardAPI_ServiceDesc is the grpc.ServiceDesc for ServiceShardAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceShardAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shard.ServiceShardAPI",
	HandlerType: (*ServiceShardAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Greet",
			Handler:    _ServiceShardAPI_Greet_Handler,
		},
		{
			MethodName: "SyncDBs",
			Handler:    _ServiceShardAPI_SyncDBs_Handler,
		},
		{
			MethodName: "BatchOut",
			Handler:    _ServiceShardAPI_BatchOut_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shard.proto",
}
